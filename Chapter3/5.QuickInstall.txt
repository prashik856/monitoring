Prometheus Operator – Quick install

https://github.com/mateobur/prometheus-monitoring-guide
The prometheus-monitoring-guide repository contains some of the base yaml files and example customizations we will use.
 First of all, clone the repositories if you haven’t done it yet:

git clone https://github.com/coreos/prometheus-operator.git
git clone https://github.com/mateobur/prometheus-monitoring-guide.git

Make sure your local kubectl is pointing to a running kubernetes cluster. 
You probably want to use a testbed cluster that you can easily discard and recreate, 
so you can experiment with different configurations.

To install kube-prometheus using defaults you just need to:
kubectl create -f prometheus-operator/contrib/kube-prometheus/manifests/

The default stack deploys a lot of components out of the box:
kubectl get pods -n monitoring
NAME                                  READY     STATUS    RESTARTS   AGE
alertmanager-main-0                   2/2       Running   0          7m
alertmanager-main-1                   2/2       Running   0          7m
alertmanager-main-2                   2/2       Running   0          6m
grafana-5568b65944-nwbct              1/1       Running   0          8m
kube-state-metrics-76bdcb8ff9-77t52   4/4       Running   0          6m
node-exporter-224sh                   2/2       Running   0          7m
node-exporter-2s89j                   2/2       Running   0          7m
node-exporter-x8w8b                   2/2       Running   0          7m
prometheus-k8s-0                      3/3       Running   1          7m
prometheus-k8s-1                      3/3       Running   1          6m
prometheus-operator-cdccdb8db-vcvhx   1/1       Running   0          8m

You can see:
    - The prometheus-operator pod, the core of the stack, in charge of managing other deployments like 
      Prometheus servers or Alertmanager servers
    - A node-exporter pod per physical host (3 in this example)
    - A kube-state-metrics exporter
    - The default Prometheus server deployment prometheus-k8s (replicas: 2)
    - The default Alertmanager deployment alertmanager-main (replicas: 3)
    - The Grafana deployment grafana (replicas: 1)


Accessing the interfaces of the Prometheus Operator:
To quickly get a glimpse of the interfaces that you just deployed, you can use the port-forward capabilities of kubectl.
kubectl port-forward grafana-5568b65944-nwbct -n monitoring 3000:3000

Now point your web browser to http://localhost:3000 , you will access the 
Grafana interface, which is already populated with some useful dashboards!

But If you want to deploy a production Kubernetes monitoring you will need 
to expose these interfaces properly using an ingress controller and with proper security: 
HTTPS certificates and authentication.



Interacting with the Prometheus Operator via CRD objects:
To modify this Prometheus stack deployment, instead of modifying each component Deployment
 or StatefulSet as you would expect in Kubernetes, you will directly customize 
 the abstract definitions and let the operator handle the orchestration for you.

Let’s start with a simple example: let’s say 3 Alertmanager pods are too many for this scenario, and we just want one.
First, we will explore the alertmanager CRD:
kubectl get alertmanager main -n monitoring -o yaml
apiVersion: monitoring.coreos.com/v1
kind: Alertmanager
metadata:
  clusterName: ""
  creationTimestamp: 2018-08-28T09:15:25Z
  labels:
    alertmanager: main
  name: main
  namespace: monitoring
  resourceVersion: "1401"
  selfLink: /apis/monitoring.coreos.com/v1/namespaces/monitoring/alertmanagers/main
  uid: e5d335aa-aaa2-11e8-8cf2-42010a800113
spec:
  baseImage: quay.io/prometheus/alertmanager
  nodeSelector:
    beta.kubernetes.io/os: linux
  replicas: 3
  serviceAccountName: alertmanager-main
  version: v0.15.2

From here you can modify the pod labels, serviceAccount, nodeSelector and what we were looking for: the number of replicas.

Change the replicas parameter to ‘1’, patching the API object 
(you can find the patched version in the prometheus-monitoring-guide repository):
kubectl create -f prometheus-monitoring-guide/operator/alertmanager.yaml --dry-run -o yaml | kubectl apply -f -

If you list the pods in the monitoring namespace again, 
you will see just one Alertmanager pod and the resize event in the logs of the Prometheus Operator itself:
kubectl logs prometheus-operator-cdccdb8db-vcvhx -n monitoring | tail -n 1
level=info ts=2018-08-28T09:47:20.523662127Z caller=operator.go:402 component=alertmanageroperator msg="sync alertmanager" key=monitoring/main

